apiVersion: v1
kind: Namespace
metadata:
  name: greenops
---
apiVersion: v1
kind: Secret
metadata:
  name: greenops-secrets
  namespace: greenops
type: Opaque
data:
  # These should be base64 encoded values
  # SUPABASE_KEY: <base64-encoded-supabase-key>
  # GITHUB_TOKEN: <base64-encoded-github-token>
  # GITHUB_PRIVATE_KEY: <base64-encoded-github-private-key>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: greenops-config
  namespace: greenops
data:
  SUPABASE_URL: "https://your-supabase-url.supabase.co"
  PROMETHEUS_URL: "http://prometheus.monitoring.svc:9090"
  OPENCOST_URL: "http://opencost.opencost.svc:9003"
  KEPLER_URL: "http://kepler.kepler.svc:9102"
  OLLAMA_URL: "http://ollama.ollama.svc:11434"
  CLUSTER_NAME: "production-cluster"
  CARBON_INTENSITY_G_PER_KWH: "475"
  GITHUB_APP_ID: "2183814"
  GITHUB_CLIENT_ID: "Iv23livJHhuhTFwzEG6Z"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: greenops-backend
  namespace: greenops
  labels:
    app: greenops-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: greenops-backend
  template:
    metadata:
      labels:
        app: greenops-backend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        readOnlyRootFilesystem: true
      containers:
      - name: backend
        image: greenops-advisor-backend:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: greenops-config
        - secretRef:
            name: greenops-secrets
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: greenops-backend
  namespace: greenops
spec:
  selector:
    app: greenops-backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: greenops-frontend
  namespace: greenops
  labels:
    app: greenops-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: greenops-frontend
  template:
    metadata:
      labels:
        app: greenops-frontend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        readOnlyRootFilesystem: true
      containers:
      - name: frontend
        image: greenops-advisor-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_SUPABASE_URL
          valueFrom:
            configMapKeyRef:
              name: greenops-config
              key: SUPABASE_URL
        - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: greenops-secrets
              key: SUPABASE_KEY
        - name: NEXT_PUBLIC_API_URL
          value: "http://greenops-backend:8000"
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: greenops-frontend
  namespace: greenops
spec:
  selector:
    app: greenops-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: greenops-ingress
  namespace: greenops
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: greenops.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: greenops-frontend
            port:
              number: 3000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: greenops-backend
            port:
              number: 8000